version: '3'

services:
  
  db:
    image: postgres:14
    environment:
      - POSTGRES_DB=${pg_db}
      - POSTGRES_USER=${pg_user}
      - POSTGRES_PASSWORD=${pg_pass}
    ports:
      - "${pg_port}:${pg_port}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    networks:
      - netflix_clone

  admin_panel:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.admin_panel
    env_file:
      - ./.env
    volumes:
      - static_volume:/app/static/
    depends_on:
      db:
        condition: service_healthy
    networks:
      - netflix_clone

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - static_volume:/static/:ro
    depends_on:
      - admin_panel
    ports:
      - "80:80"
      - "8000:8000"
    networks:
      - netflix_clone


  elasticsearch:
    image: elasticsearch:8.6.2
    restart: always
    ports:
      - "${elastic_port}:${elastic_port}"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    healthcheck:
      test: curl -s http://${elastic_host}:${elastic_port} >/dev/null || exit 1
      interval: 1s
      timeout: 1s
      retries: 50
    networks:
      - netflix_clone

  redis:
    image: redis:latest
    ports:
      - "${redis_port}"
    command: redis-server --requirepass ${redis_pass} --appendonly yes
    networks:
      - netflix_clone

  

networks:
  netflix_clone:

volumes:
  static_volume:
